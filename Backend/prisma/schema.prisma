generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model User {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  userName      String
  email         String   @unique
  password      String
  course        Course[]
  rating        UserOnCourseRating[]
}

model Category{
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  title         String      @unique
  course        Course[]
}

model Course {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  name          String
  title         String
  description   String
  price         Float       @default(0)
  revisedPrice  Float       @default(0)
  thumbnail     String
  authorId      Int
  categoryId    Int
  author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  content       Content?
  requirements  Requirements[]
  rating        UserOnCourseRating[]
}

model Content {
  id            Int         @id @default(autoincrement())
  courseId      Int         @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  course        Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Requirements{
  id            Int         @id @default(autoincrement())
  courseId      Int         @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  course        Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Rating {
  id          Int                   @id @default(autoincrement())
  value       Float
  review      String
  course      UserOnCourseRating[]
}

model UserOnCourseRating {
  corseId     Int         
  ratingId    Int         
  userId      Int         
  course      Course      @relation(fields: [corseId], references: [id], onDelete: Cascade)
  rating      Rating      @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt  DateTime    @default(now())

  @@id([corseId, ratingId, userId])
}
